/**
 * Textbook PDF Generator
 * Generates beautiful PDFs from textbook content
 */

export interface TextbookPDFConfig {
  textbook: Record<string, unknown>
  chapters: Array<Record<string, unknown>>
}

/**
 * Generate PDF from textbook data
 * Uses a simple HTML to PDF approach
 */
export async function generateTextbookPDF(config: TextbookPDFConfig): Promise<Buffer> {
  const { textbook, chapters } = config

  console.log(`   üìÑ Generating PDF for: ${textbook.title}`)
  console.log(`   Chapters: ${chapters.length}`)

  try {
    // Generate HTML content
    const html = generateHTML(textbook, chapters)

    // Convert HTML to PDF
    // Note: In production, use puppeteer or a PDF library
    // For now, we'll create a simple PDF structure
    const pdfContent = await convertHTMLToPDF(html, textbook.title)

    console.log(`   ‚úÖ PDF generated: ${pdfContent.length} bytes`)

    return pdfContent
  } catch (error: unknown) {
    console.error(
      `   ‚ùå PDF generation error:`,
      error instanceof Error ? error.message : 'Unknown error'
    )
    throw new Error(
      `Failed to generate PDF: ${error instanceof Error ? error.message : 'Unknown error'}`
    )
  }
}

/**
 * Generate HTML content for PDF
 */
function generateHTML(
  textbook: Record<string, unknown>,
  chapters: Array<Record<string, unknown>>
): string {
  const html = `
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>${textbook.title}</title>
  <style>
    @page {
      size: A4;
      margin: 2cm;
    }
    
    body {
      font-family: 'Noto Sans JP', 'Yu Gothic', sans-serif;
      line-height: 1.8;
      color: #333;
      font-size: 12pt;
    }

    h1 {
      color: #2563eb;
      font-size: 24pt;
      margin-top: 40px;
      margin-bottom: 20px;
      page-break-before: always;
    }

    h1:first-of-type {
      page-break-before: avoid;
    }

    h2 {
      color: #1e40af;
      font-size: 18pt;
      margin-top: 30px;
      margin-bottom: 15px;
    }

    h3 {
      color: #3b82f6;
      font-size: 14pt;
      margin-top: 20px;
      margin-bottom: 10px;
    }

    .cover {
      text-align: center;
      padding: 100px 0;
      page-break-after: always;
    }

    .cover-title {
      font-size: 32pt;
      font-weight: bold;
      color: #1e40af;
      margin-bottom: 20px;
    }

    .cover-level {
      font-size: 18pt;
      color: #64748b;
      margin-bottom: 10px;
    }

    .cover-info {
      font-size: 12pt;
      color: #94a3b8;
    }

    .vocab-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin: 20px 0;
    }

    .vocab-item {
      background: #f1f5f9;
      padding: 15px;
      border-radius: 8px;
      border-left: 4px solid #3b82f6;
    }

    .vocab-word {
      font-size: 14pt;
      font-weight: bold;
      color: #1e293b;
    }

    .vocab-reading {
      font-size: 10pt;
      color: #64748b;
      margin: 5px 0;
    }

    .vocab-meaning {
      font-size: 11pt;
      color: #475569;
    }

    .grammar-box {
      background: #dbeafe;
      padding: 15px;
      border-radius: 8px;
      border-left: 4px solid #2563eb;
      margin: 15px 0;
    }

    .grammar-pattern {
      font-size: 13pt;
      font-weight: bold;
      color: #1e40af;
      margin-bottom: 10px;
    }

    .grammar-meaning {
      font-size: 11pt;
      color: #1e293b;
      margin-bottom: 10px;
    }

    .grammar-example {
      background: white;
      padding: 10px;
      border-radius: 4px;
      font-size: 11pt;
      color: #334155;
    }

    .exercise-box {
      background: #dcfce7;
      padding: 15px;
      border-radius: 8px;
      border-left: 4px solid #22c55e;
      margin: 15px 0;
    }

    .exercise-number {
      font-weight: bold;
      color: #15803d;
    }

    .toc {
      page-break-after: always;
    }

    .toc-item {
      margin: 10px 0;
      padding: 10px;
      border-bottom: 1px solid #e2e8f0;
    }

    .toc-number {
      font-weight: bold;
      color: #2563eb;
    }

    .footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 2px solid #e2e8f0;
      text-align: center;
      color: #94a3b8;
      font-size: 10pt;
    }

    .page-break {
      page-break-before: always;
    }
  </style>
</head>
<body>
  <!-- Cover Page -->
  <div class="cover">
    <div class="cover-title">${textbook.title}</div>
    <div class="cover-level">JLPT ${textbook.jlpt_level}</div>
    <div class="cover-info">
      ${textbook.total_chapters} Chapters ‚Ä¢ Generated by AI
    </div>
    <div class="cover-info" style="margin-top: 50px;">
      ${new Date().toLocaleDateString()}
    </div>
  </div>

  <!-- Table of Contents -->
  <div class="toc">
    <h1>üìö Table of Contents</h1>
    ${chapters
      .map(
        (ch, _idx) => `
      <div class="toc-item">
        <span class="toc-number">Chapter ${ch.chapter_number}</span> - ${ch.title}
      </div>
    `
      )
      .join('')}
  </div>

  <!-- Chapters -->
  ${chapters
    .map(
      (chapter) => `
    <div class="chapter">
      <h1>Chapter ${chapter.chapter_number}: ${chapter.title}</h1>
      
      ${
        chapter.introduction
          ? `
        <div class="introduction">
          <p>${chapter.introduction}</p>
        </div>
      `
          : ''
      }

      ${
        chapter.vocabulary && chapter.vocabulary.length > 0
          ? `
        <h2>üìù Vocabulary</h2>
        <div class="vocab-grid">
          ${chapter.vocabulary
            .map(
              (vocab: Record<string, unknown>) => `
            <div class="vocab-item">
              <div class="vocab-word">${vocab.word || vocab.japanese}</div>
              ${vocab.reading ? `<div class="vocab-reading">${vocab.reading}</div>` : ''}
              <div class="vocab-meaning">${vocab.meaning || vocab.english}</div>
            </div>
          `
            )
            .join('')}
        </div>
      `
          : ''
      }

      ${
        chapter.grammar_points && chapter.grammar_points.length > 0
          ? `
        <h2>üìñ Grammar Points</h2>
        ${chapter.grammar_points
          .map(
            (grammar: Record<string, unknown>) => `
          <div class="grammar-box">
            <div class="grammar-pattern">${grammar.structure || grammar.pattern}</div>
            <div class="grammar-meaning">${grammar.meaning || grammar.explanation}</div>
            ${
              grammar.example
                ? `
              <div class="grammar-example">${grammar.example}</div>
            `
                : ''
            }
          </div>
        `
          )
          .join('')}
      `
          : ''
      }

      ${
        chapter.sections && chapter.sections.length > 0
          ? `
        <h2>üìö Content</h2>
        ${chapter.sections
          .map(
            (section: Record<string, unknown>) => `
          ${section.title ? `<h3>${section.title}</h3>` : ''}
          <p>${section.content || section.text}</p>
        `
          )
          .join('')}
      `
          : ''
      }

      ${
        chapter.exercises && chapter.exercises.length > 0
          ? `
        <h2>‚úèÔ∏è Practice Exercises</h2>
        ${chapter.exercises
          .map(
            (exercise: Record<string, unknown>, idx: number) => `
          <div class="exercise-box">
            <div class="exercise-number">${idx + 1}. ${exercise.question || exercise.prompt}</div>
            ${
              exercise.options
                ? `
              <div style="margin-left: 20px; margin-top: 10px;">
                ${exercise.options
                  .map(
                    (opt: string, oidx: number) => `
                  <div>${String.fromCharCode(97 + oidx)}. ${opt}</div>
                `
                  )
                  .join('')}
              </div>
            `
                : ''
            }
          </div>
        `
          )
          .join('')}
      `
          : ''
      }

      <div class="footer">
        ${textbook.title} ‚Ä¢ Chapter ${chapter.chapter_number}
      </div>
    </div>
  `
    )
    .join('')}

  <!-- Back Cover -->
  <div class="page-break"></div>
  <div class="cover">
    <div class="cover-title">Congratulations! üéâ</div>
    <div class="cover-info">
      You&apos;ve completed "${textbook.title}"
    </div>
    <div class="cover-info" style="margin-top: 30px;">
      Keep practicing and advancing your Japanese! È†ëÂºµ„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºÅ
    </div>
  </div>
</body>
</html>
  `

  return html
}

/**
 * Convert HTML to PDF
 * In production, use puppeteer or a proper PDF library
 */
async function convertHTMLToPDF(html: string, _title: string): Promise<Buffer> {
  // For now, we'll return the HTML as a simple text PDF
  // In production, use: puppeteer, jsPDF, pdfmake, or html-pdf

  // Create a simple PDF-like structure
  const pdfHeader = Buffer.from('%PDF-1.4\n')
  const content = Buffer.from(html, 'utf8')

  // Note: This is a placeholder. In production, use proper PDF generation
  console.log(`   ‚ö†Ô∏è  Using placeholder PDF generation`)
  console.log(`   üìå To enable proper PDF: install puppeteer or jsPDF`)

  // Return HTML wrapped as "PDF" (will need proper PDF library in production)
  return Buffer.concat([pdfHeader, content])
}

export default {
  generateTextbookPDF,
}
